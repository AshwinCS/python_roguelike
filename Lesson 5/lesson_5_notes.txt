How are we going to structure our objects in the game?


We could structure the objects in our game as a strict inheritance system:

Parents--->Children
A top-down style method.
All children inherit the code from the parents.

Example: Actor (parent) --> Item (child) - Characters (Child) -- Containers (Child)
Then these children parent their own children:
Actor --> Item --> Potions -- Scrolls -- Weapons
Actor --> Characters --> Player -- Enemies 
etc.


vs.


An inheritance system can quickly turn into a hot-mess.

Or we could choose a "component system"
We 'glue on' parts of 
Component System--> more like a Ecosystem
In a compontent system we 'glue on' components to different classes. A more bottom up method.

There is no parent - child relationship.

Objects do not inherit code from their parents. There are no parents.

example: Player = Actor()
we pass lot's of different components to Player.

Enemy gets passed "AI" component, "Creature component" etc.

Remember: We are calling an "Actor" anything that interacts with the game.

Other advantages of a component system: 

If we wanted to do some strange things like create a spell that causes the player to loose control of the hero (like a "mind control spell").  All we have to do is pass the "AI" component to the player object.


To sum up.

1.) We are going to use a "component system" not a "Class inheritance system"

2.) Everything interactive in the game will be of the Actor class.  All components will be linked to actor class.

Example:
Sword() = Actor(Item, Weapon)
Enemy() = Actor(Character, Creature, AI)
Hero() = Actor(Player, Character, Creature)

3.) 